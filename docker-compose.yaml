version: '2'
services:
  producer:
   build:
    context: ./producer-service
    dockerfile: Dockerfile
   container_name: producer-service
   volumes:
      - .:/usr/src/app
   ports:
    - "70:3000"
   networks:
    - node

  consumer:
   build:
    context: ./consumer-service
    dockerfile: Dockerfile
   container_name: consumer-service
   volumes:
      - .:/usr/src/app
   ports:
    - "71:3001"
   networks:
    - node

  zookeeper:
    image: 'zookeeper:3.6.3'
    container_name: zookeeper
    ports:
      - '2181:2181'
    networks:
      - node
  
  kafka:
    image: 'confluentinc/cp-kafka:6.2.1'
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
      - '29092:29092'
    networks:
      - node
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - '9000:9000'
    networks:
      - node
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    networks:
      - node
    volumes:
      - ./data:/data/db
networks:
  node:
 